// PathMap Zipper Advanced Navigation - Simple Demo
// Shows all 7 methods with minimal nesting

new stdout(`rho:io:stdout`) in {
  
  stdout!("=== Advanced Navigation Demo ===\n") |
  
  new db in {
    db!({| 
      ["users", "alice", "age", "30"],
      ["users", "bob", "age", "25"],
      ["users", "charlie", "age", "35"]
    |}) |
    
    for (@pathmap <- db) {
      
      // Demo 1: childCount
      new count1 in {
        count1!(pathmap.readZipperAt(["users"]).childCount()) |
        for (@c <- count1) {
          stdout!(["\n1. childCount(): ", c, "\n"])
        }
      } |
      
      // Demo 2: descendFirst  
      new first in {
        first!(pathmap.readZipperAt(["users"]).descendFirst()) |
        for (@f <- first) {
          stdout!("\n2. descendFirst(): ") |
          stdout!(f) |
          stdout!("\n")
        }
      } |
      
      // Demo 3: toNextSibling
      new next in {
        next!(pathmap.readZipperAt(["users", "alice"]).toNextSibling()) |
        for (@n <- next) {
          stdout!("\n3. toNextSibling(): ") |
          stdout!(n) |
          stdout!("\n")
        }
      } |
      
      // Demo 4: toPrevSibling
      new prev in {
        prev!(pathmap.readZipperAt(["users", "charlie"]).toPrevSibling()) |
        for (@p <- prev) {
          stdout!("\n4. toPrevSibling(): ") |
          stdout!(p) |
          stdout!("\n")
        }
      } |
      
      // Demo 5: descendIndexedBranch
      new indexed in {
        indexed!(pathmap.readZipperAt(["users"]).descendIndexedBranch(1)) |
        for (@i <- indexed) {
          stdout!("\n5. descendIndexedBranch(1): ") |
          stdout!(i) |
          stdout!("\n")
        }
      } |
      
      // Demo 6: ascendOne
      new asc1 in {
        asc1!(pathmap.readZipperAt(["users", "alice", "age"]).ascendOne()) |
        for (@a <- asc1) {
          stdout!("\n6. ascendOne(): ") |
          stdout!(a) |
          stdout!("\n")
        }
      } |
      
      // Demo 7: ascend
      new asc2 in {
        asc2!(pathmap.readZipperAt(["users", "alice", "age"]).ascend(2)) |
        for (@a <- asc2) {
          stdout!("\n7. ascend(2): ") |
          stdout!(a) |
          stdout!("\n\n=== All 7 Methods Demonstrated ===\n")
        }
      }
    }
  }
}

