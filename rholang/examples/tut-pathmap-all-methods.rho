new stdout(`rho:io:stdout`) in {
  // Test union
  new chl0, stdoutAck(`rho:io:stdoutAck`) in {
    stdoutAck!("Union: {| [hi, there], [hi, mom] |} \\/ {| [hello] |}", *chl0) |
    stdoutAck!({| ["hi", "there"], ["hi", "mom"] |}.union({| ["hello"] |}), *chl0) | 
    for (_ <- chl0) {
      stdout!("")
    }
  } |
  
  // Test intersection
  new chl1, stdoutAck(`rho:io:stdoutAck`) in {
    stdoutAck!("Intersection: {| [a, b], [a, c] |} /\\ {| [a, b], [x, y] |}", *chl1) |
    stdoutAck!({| ["a", "b"], ["a", "c"] |}.intersection({| ["a", "b"], ["x", "y"] |}), *chl1) |
    for (_ <- chl1) {
      stdout!("")
    }
  } |

  // Test diff (subtraction)
  new chl2, stdoutAck(`rho:io:stdoutAck`) in {
    stdoutAck!("Subtraction: {| [a, b], [a, c], [d, e] |} - {| [a, b] |})", *chl2) |
    stdoutAck!({| ["a", "b"], ["a", "c"], ["d", "e"] |}.diff({| ["a", "b"] |}), *chl2) |
    for (_ <- chl2) {
      stdout!("")
    }
  } |
  // Test restriction
  new chl3, stdoutAck(`rho:io:stdoutAck`) in {
    stdoutAck!("Restriction: {| [books, fiction, gatsby], [books, fiction, moby], [books, nonfiction, history] |} |> ({| [books, fiction] |})", *chl3) |
    stdoutAck!({| ["books", "fiction", "gatsby"], ["books", "fiction", "moby"], ["books", "nonfiction", "history"] |}.restriction({| ["books", "fiction"] |}), *chl3) |
    for (_ <- chl3) {
      stdout!("")
    }
  } |
  // Test dropHead
  new chl4, stdoutAck(`rho:io:stdoutAck`) in {
    stdoutAck!("dropHead: {| [books, don_quixote], [books, gatsby] |} << 1", *chl4) |
    stdoutAck!({| ["books", "don_quixote"], ["books", "gatsby"] |}.dropHead(1), *chl4) |
    for (_ <- chl4) {
      stdout!("")
    }
  }
}
