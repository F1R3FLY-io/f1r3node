# =================================================================
# STANDALONE DEVELOPMENT NODE CONFIGURATION
# =================================================================
# This configuration is for a single standalone development node
#
# ROLE: Standalone Development Node (instant finalization, single node network)
# - Runs in standalone mode (no network connections)
# - Creates genesis block immediately with no ceremony
# - Finalizes blocks instantly (synchrony-constraint-threshold = 0.0)
# - Perfect for development, testing, and contract deployment
#
# KEY FEATURES:
# - standalone = true (single node network)
# - ceremony-master-mode = true (creates genesis immediately)
# - required-signatures = 0 (no waiting for other validators)
# - synchrony-constraint-threshold = 0.0 (instant finalization)
# - dev-mode = true (enables development features)
# - deployer-private-key set for easy contract deployment
#
# USED BY: standalone service ONLY
# Based on bootstrap-ceremony.conf with standalone-specific overrides

# Start a stand-alone node.
# In this mode node
# 1. does not connect to any network
# 2. `casper.genesis-ceremony.ceremony-master-mode` = true
# 3. `required-signatures` = 0
# for node to be able to create and approve genesis block if its not available
standalone = true

# Enable autopropose for continuous block creation
autopropose = true

protocol-server {
  # ID of the F1r3fly network.
  network-id = "standalone-dev"

  # Allow private addresses for development
  allow-private-addresses = true

  # Use random ports in case F1r3fly Protocol port and/or Kademlia port are not free.
  use-random-ports = false

  # Support dynamic IP
  dynamic-ip = false

  # Disable UPnP (as specified in your command)
  no-upnp = true

  # Port for protocol server
  port = 40400

  # Maximum message size that can be received
  grpc-max-recv-message-size = 256K

  # Maximum size of messages that can be received via streams
  # This is effectively max size of a block
  grpc-max-recv-stream-message-size = 256M

  # Number of incoming F1r3fly Protocol message consumers
  max-message-consumers = 400

  # whether a node could export the state to other nodes
  disable-state-exporter = false
}

protocol-client {
  # Should be the same as server network ID.
  network-id = ${protocol-server.network-id}

  # No bootstrap needed for standalone mode
  # bootstrap = ""

  # Disable the node to start from Last Finalized State, instead it will start from genesis.
  disable-lfs = false

  # Number of connected peers picked randomly for broadcasting and streaming
  batch-max-connections = 20

  # Default timeout for network operations
  network-timeout = 5 seconds

  # Max message size for inbound gRPC messages
  grpc-max-recv-message-size = ${protocol-server.grpc-max-recv-message-size}

  # Chunk size for outbound streamed messages
  grpc-stream-chunk-size = 256K
}

peers-discovery {
  # Port for Kademlia server
  port = 40404

  # Interval for peers lookup
  lookup-interval = 20 seconds

  # Interval for check for stale connections
  cleanup-interval = 20 minutes

  # Number of connections to check for being active at a time
  heartbeat-batch-size = 100

  # Check for first connection loop interval
  init-wait-loop-interval = 1 seconds
}

api-server {
  # Hostname or IP to bind API servers
  host = "0.0.0.0"

  # Port used for external gRPC API, exposes public API endpoints.
  port-grpc-external = 40401

  # Port used for internal gRPC API, exposes propose API and other non public endpoints.
  port-grpc-internal = 40402

  # Maximum size of message that can be received. This is effectively max size of a deploy.
  grpc-max-recv-message-size = 16M

  # Port for HTTP API
  port-http = 40403

  # Port for admin HTTP API
  port-admin-http = 40405

  # Some of API methods are loading blocks into memory, which can lead to memory exhaustion.
  # This puts upper bound on number of blocks that can be loaded via single API call.
  max-blocks-limit = 50

  # Enable reporting API
  enable-reporting = false

  # Sets a custom keepalive time, the delay time for sending next keepalive ping
  keep-alive-time = 2 hours

  # Sets a custom keepalive timeout, the timeout for keepalive ping requests
  keep-alive-timeout = 20 seconds

  # The most aggressive keep-alive time clients are permitted to configure.
  permit-keep-alive-time = 5 minutes

  # Sets a custom max connection idle time, connection being idle for longer than which will be gracefully terminated
  max-connection-idle = 1 hours

  # Sets a custom max connection age, connection lasting longer than which will be gracefully terminated
  max-connection-age = 1 hours

  # Sets a custom grace time for the graceful connection termination.
  max-connection-age-grace = 1 hours
}

storage {
  # Path to data directory. Depends on CLI `profile` option.
  data-dir = ${default-data-dir}
}

tls {
  # Path to X.509 certificate for TLS. If file does not exist, certificate will be
  # generated from PEM key located at `tls.key-path`.
  certificate-path = ${storage.data-dir}/node.certificate.pem

  # Path to private key for TLS. Elliptic curve secp256r1 key in PEM format is supported.
  # If file does not exist, new key will be generated.
  key-path = ${storage.data-dir}/node.key.pem

  # Use a non blocking secure random instance to generate TLS key
  secure-random-non-blocking = false

  custom-certificate-location = false
  custom-key-location = false
}

casper {
  # Block is considered as finalized if its fault tolerance is bigger than this value.
  # Set to 0.0 for instant finalization in standalone mode
  fault-tolerance-threshold = 0.0

  # Validator keys (set via command line)
  # validator-public-key = 04ffc016579a68050d655d55df4e09f04605164543e257c8e6df10361e6068a5336588e9b355ea859c5ab4285a5ef0efdf62bc28b80320ce99e26bb1607b3ad93d
  # validator-private-key = 5f668a7ee96d944a4494cc947e4005e172d7ab3461ee5538f1f2a45a835e9657

  # Shard name written into PoS contract during genesis.
  shard-name = root

  # ID of the parent shard. For root shard it's `/`.
  parent-shard-id = /

  # Interval of the casper loop to maintain requested blocks and missing dependent blocks
  casper-loop-interval = 5 seconds

  # Timeout for the requested blocks
  requested-blocks-timeout = 60 seconds

  # Finalization is called every `finalization-rate` blocks
  finalization-rate = 1

  # Maximum number of block parents
  max-number-of-parents = 1

  # Maximum depth of block parents.
  max-parent-depth = 2147483647

  # Node will request for fork choice tips if the latest FCT is more than this value.
  fork-choice-stale-threshold = 30 seconds

  # Interval for check if fork choice tip is stale
  fork-choice-check-if-stale-interval = 1 minutes

  # Each block in Casper is justified by number of other blocks.
  # Set to 0.0 for instant finalization (as specified in your command)
  synchrony-constraint-threshold = 0.0

  # Node is allowed to propose a block only when last finalised block is less then `height-constraint-threshold`
  # behind. This is experimental option.
  height-constraint-threshold = 1000

  # Constraints for block consumption.
  round-robin-dispatcher {
    max-peer-queue-size = 100
    give-up-after-skipped = 0
    drop-peer-after-retries = 0
  }

  # Genesis block variables
  genesis-block-data {
    genesis-data-dir = ${storage.data-dir}/genesis

    # Plain text file consisting of lines of the form `<pk> <stake>`,
    # which defines the bond amounts for each validator at genesis.
    bonds-file = ${casper.genesis-block-data.genesis-data-dir}/bonds.txt

    # Plain text file consisting of lines of the form `<algorithm> <pk> <revBalance>`,
    # which defines the Rev wallets that exist at genesis.
    wallets-file = ${casper.genesis-block-data.genesis-data-dir}/wallets.txt

    # Minimum bond accepted by the PoS contract in the genesis block.
    bond-minimum = 1

    # Maximum bond accepted by the PoS contract in the genesis block.
    bond-maximum = 9223372036854775807

    # Length of the validation epoch measured in blocks.
    epoch-length = 10

    # Length of the quarantine time measured in blocks.
    quarantine-length = 10

    # Max number of active validator in a shard.
    number-of-active-validators = 1

    # genesis-block-number is used for hard fork on existing network.
    genesis-block-number = 0

    # Public keys accepted by the PoS contract in the genesis block.
    # Using the bootstrap node public key for standalone mode
    pos-multi-sig-public-keys = [
      04ffc016579a68050d655d55df4e09f04605164543e257c8e6df10361e6068a5336588e9b355ea859c5ab4285a5ef0efdf62bc28b80320ce99e26bb1607b3ad93d
    ]

    # How many confirmations are necessary to use multi-sig vault.
    pos-multi-sig-quorum = 1
  }

  # Genesis ceremony variables
  genesis-ceremony {
    # Number of signatures from bonded validators required for Ceremony Master to approve the genesis block.
    # For standalone node in testing environment always use `0` so node can approve genesis block and start the
    # one-node network.
    required-signatures = 0

    # Each `approve-interval` Ceremony Master (CM) checks if it have gathered enough signatures to approve
    # the genesis block. Instant approval for standalone mode.
    approve-interval = 1 seconds

    # Time window in which BlockApproval messages will be accumulated before checking conditions.
    approve-duration = 1 seconds

    # If node has to create genesis block but no bonds file is provided, bonds file with a list of
    # random public keys is generated + private keys corresponding to that keys are stored
    # in `<genesis-path>/<public_key>.sk`
    autogen-shard-size = 1

    # Allow node being a genesis validator
    # Set to FALSE for standalone ceremony master - it coordinates genesis but is not a validator
    # The validator key is provided via --validator-private-key but node acts as ceremony master
    genesis-validator-mode = false

    # Allow node being ceremony master
    # Set to TRUE for standalone mode - this node IS the ceremony master that creates genesis
    ceremony-master-mode = true
  }

  # The minimum Phlogiston price. Set to 1 for development
  min-phlo-price = 1

  # Bitcoin Anchor configuration - disabled for standalone development
  bitcoin-anchor {
    # Disable Bitcoin anchoring for standalone development
    enabled = false
    
    # Bitcoin network to use: "regtest" for development
    network = "regtest"
    
    # Distributed anchoring coordination
    distributed = false
  }
}

# Enable/disable Kamon reporters. Disabled for development
metrics {
  prometheus = false
  influxdb = false
  influxdb-udp = false
  zipkin = false
  sigar = false
}

# Enable development mode
dev-mode = true

dev {
  # Set deployer private key for easy contract deployment
  # Using the bootstrap node private key
  deployer-private-key = "5f668a7ee96d944a4494cc947e4005e172d7ab3461ee5538f1f2a45a835e9657"
}
